import telebot
import psycopg2
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import time

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = '7825077866:AAFnTGqpayF81VaFU-NRRYk3rgjxji4srO4'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
conn = psycopg2.connect(
    dbname="postgres",
    user="alex",
    password="1234",
    host="localhost",
    port="5432"
)
cursor = conn.cursor()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_context = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id –ø–æ chat_id
def get_user_id_by_chat_id(chat_id):
    try:
        cursor.execute("SELECT id FROM users WHERE chat_id = %s;", (chat_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(chat_id, username, full_name, age):
    try:
        cursor.execute("SELECT id FROM users WHERE chat_id = %s;", (chat_id,))
        user = cursor.fetchone()
        if user:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id={chat_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å id={user[0]}.")
            return user[0]
        
        cursor.execute(
            """
            INSERT INTO users (chat_id, username, full_name, age, registration_date)
            VALUES (%s, %s, %s, %s, NOW())
            RETURNING id;
            """,
            (chat_id, username, full_name, age)
        )
        user_id = cursor.fetchone()[0]
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: chat_id={chat_id}, id={user_id}.")
        return user_id
    except Exception as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def get_user_id_by_chat_id(chat_id):
    try:
        cursor.execute("SELECT id FROM users WHERE chat_id = %s;", (chat_id,))
        result = cursor.fetchone()
        print(f"–ü–æ–ª—É—á–µ–Ω user_id –¥–ª—è chat_id={chat_id}: {result}")
        return result[0] if result else None
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user_progress(user_id, topic_id, sub_id, is_correct):
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
        if not is_correct:
            print(f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ sub_id={sub_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user_id} –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ sub_id
        cursor.execute(
            "SELECT 1 FROM user_progress WHERE user_id = %s AND sub_id = %s AND is_correct = TRUE;",
            (user_id, sub_id)
        )
        if cursor.fetchone():
            print(f"–ó–∞–ø–∏—Å—å –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–∞ sub_id={sub_id} –æ—Ç user_id={user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        cursor.execute(
            """
            INSERT INTO user_progress (user_id, topic_id, sub_id, is_correct, completion_date)
            VALUES (%s, %s, %s, %s, NOW());
            """,
            (user_id, topic_id, sub_id, is_correct)
        )
        conn.commit()
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ –≤–æ–ø—Ä–æ—Å—É {sub_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except psycopg2.Error as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
def increment_user_score(user_id):
    try:
        cursor.execute(
            """
            INSERT INTO leaderboard (user_id, correct_answers)
            VALUES (%s, 1)
            ON CONFLICT (user_id)
            DO UPDATE SET correct_answers = leaderboard.correct_answers + 1;
            """,
            (user_id,)
        )
        conn.commit()
        print(f"–°—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–≤–µ–ª–∏—á–µ–Ω.")
    except psycopg2.Error as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
        cursor.execute(
            """
            INSERT INTO leaderboard (user_id, correct_answers)
            VALUES (%s, 1)
            ON CONFLICT (user_id)
            DO UPDATE SET correct_answers = leaderboard.correct_answers + 1;
            """,
            (user_id,)
        )
        conn.commit()
        print(f"–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except psycopg2.Error as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = get_user_id_by_chat_id(message.chat.id)

    if user_id:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        show_main_menu(message.chat.id)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        markup = InlineKeyboardMarkup()
        register_button = InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")
        markup.add(register_button)

        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∏–∑—É—á–µ–Ω–∏ SQL. –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=markup
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(chat_id):
    try:
        markup = InlineKeyboardMarkup()
        topics_button = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data="show_topics")
        leaderboard_button = InlineKeyboardButton("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")
        personal_score_button = InlineKeyboardButton("–õ–∏—á–Ω—ã–π —Å—á–µ—Ç", callback_data="personal_score")

        markup.add(topics_button, leaderboard_button, personal_score_button)
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ. –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /help",
            reply_markup=markup
        )
        print(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é chat_id={chat_id}.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π —Å—á–µ—Ç"
@bot.callback_query_handler(func=lambda call: call.data == "personal_score")
def handle_personal_score(call):
    chat_id = call.message.chat.id
    user_id = get_user_id_by_chat_id(chat_id)

    if not user_id:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    cursor.execute(
        "SELECT full_name FROM users WHERE id = %s;",
        (user_id,)
    )
    result = cursor.fetchone()
    full_name = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã leaderboard
    cursor.execute(
        """
        SELECT user_id, correct_answers
        FROM leaderboard
        ORDER BY correct_answers DESC;
        """
    )
    leaderboard = cursor.fetchall()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_place = None
    correct_answers = 0
    for i, (leader_id, score) in enumerate(leaderboard, start=1):
        if leader_id == user_id:
            user_place = i
            correct_answers = score
            break

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_place is not None:
        message = (f"‚ÑπÔ∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_name}\n"
                   f"üéØ –í–∞—à –ª–∏—á–Ω—ã–π —Å—á–µ—Ç: {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
                   f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤: {user_place}.")
    else:
        message = (f"‚ÑπÔ∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_name}\n"
                   f"üéØ –í–∞—à –ª–∏—á–Ω—ã–π —Å—á–µ—Ç: 0 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
                   f"–í—ã –µ—â–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤.")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç–∞
    markup = InlineKeyboardMarkup()
    reset_button = InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç", callback_data="reset_score")
    markup.add(reset_button)

    bot.send_message(chat_id, message, reply_markup=markup)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç"
@bot.callback_query_handler(func=lambda call: call.data == "reset_score")
def handle_reset_score(call):
    chat_id = call.message.chat.id
    user_id = get_user_id_by_chat_id(chat_id)

    if not user_id:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    try:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        cursor.execute("BEGIN;")

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_progress
        cursor.execute(
            "DELETE FROM user_progress WHERE user_id = %s;",
            (user_id,)
        )

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
        cursor.execute(
            "DELETE FROM leaderboard WHERE user_id = %s;",
            (user_id,)
        )

        bot.send_message(chat_id, "–í–∞—à —Å—á–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏ —É–ª—É—á—à–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")

    except Exception as e:
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç–∞: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@bot.callback_query_handler(func=lambda call: call.data == "register")
def handle_register_button(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    bot.register_next_step_handler(call.message, get_full_name)

def get_full_name(message):
    full_name = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    bot.register_next_step_handler(message, get_age, full_name)

def get_age(message, full_name):
    try:
        age = int(message.text.strip())
        user_id = register_user(message.chat.id, message.from_user.username, full_name, age)
        if user_id:
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            show_main_menu(message.chat.id)  # –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"
@bot.callback_query_handler(func=lambda call: call.data == "leaderboard")
def handle_leaderboard_button(call):
    show_leaderboard(call.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º"
@bot.callback_query_handler(func=lambda call: call.data == "show_topics")
def handle_show_topics(call):
    show_topics(call.message)

# –ö–æ–º–∞–Ω–¥–∞ /topics
@bot.message_handler(commands=['topics'])
def show_topics(message):
    try:
        cursor.execute("SELECT id, name FROM topics ORDER BY id;")  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID
        topics = cursor.fetchall()

        response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n"
        markup = InlineKeyboardMarkup()

        for topic in topics:
            response += f"{topic[0]}. {topic[1]}\n"
            button = InlineKeyboardButton(text=topic[1], callback_data=f"topic:{topic[0]}")
            markup.add(button)

        response += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É."
        bot.send_message(message.chat.id, response, reply_markup=markup)
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("topic:"))
def handle_topic_button(call):
    try:
        topic_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã
        cursor.execute("SELECT name, description FROM topics WHERE id = %s;", (topic_id,))
        topic = cursor.fetchone()
        if topic:
            response = f"–¢–µ–º–∞: {topic[0]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {topic[1]}"
            markup = InlineKeyboardMarkup()
            start_button = InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"start_test:{topic_id}")
            markup.add(start_button)
            bot.send_message(call.message.chat.id, response, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞.")
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã: {e}")
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã.")
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
@bot.callback_query_handler(func=lambda call: call.data.startswith("start_test:"))
def handle_start_test_button(call):
    try:
        topic_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã
        show_task(call.message, topic_id)
    except ValueError:
        bot.send_message(call.message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ–º—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /task <–Ω–æ–º–µ—Ä_—Ç–µ–º—ã>
def show_task(message, topic_id):
    try:
        sub_id = topic_id
        user_context[message.chat.id] = {'topic_id': topic_id, 'sub_id': sub_id}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        cursor.execute("SELECT question, example FROM tasks WHERE sub_id = %s;", (sub_id,))
        task = cursor.fetchone()
        if task:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
            response = f"–ó–∞–¥–∞–Ω–∏–µ:\n{task[0]}\n–ü—Ä–∏–º–µ—Ä:\n{task[1]}\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ."
            bot.send_message(message.chat.id, response)
            bot.register_next_step_handler(message, check_answer)
        else:
            bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞–Ω–∏—è.")
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ show_task: {e}")
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_answer(message):
    try:
        chat_id = message.chat.id
        sub_id = user_context[chat_id]['sub_id']
        user_answer = message.text.strip()

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT answer FROM tasks WHERE sub_id = %s;", (sub_id,))
        result = cursor.fetchone()
        if not result:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏—è.")
            return
        correct_answer = result[0]

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = get_user_id_by_chat_id(chat_id)
        if not user_id:
            user_id = register_user(chat_id, "unknown", "Unknown User", 0)
            if not user_id:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id={chat_id}.")
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if user_answer.lower() == correct_answer.lower():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            cursor.execute(
                "SELECT 1 FROM user_progress WHERE user_id = %s AND sub_id = %s;",
                (user_id, sub_id)
            )
            progress_exists = cursor.fetchone()

            if not progress_exists:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å
                add_user_progress(user_id, user_context[chat_id]['topic_id'], sub_id, True)

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤
                increment_user_score(user_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫
                user_scores[chat_id] = user_scores.get(chat_id, 0) + 1

                bot.send_message(chat_id, "–í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            else:
                bot.send_message(chat_id, "–í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
                user_scores[chat_id] = user_scores.get(chat_id, 0) + 1
        else:
            bot.send_message(chat_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{correct_answer}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        go_to_next_task(message)
    except KeyError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ check_answer: {e}")
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
def go_to_next_task(message):
    try:
        topic_id = user_context[message.chat.id]['topic_id']
        sub_id = user_context[message.chat.id]['sub_id']
        next_sub_id = sub_id + 100  # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT question, example FROM tasks WHERE sub_id = %s;", (next_sub_id,))
        next_task = cursor.fetchone()

        if next_task:
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            response = f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_task[0]}\n–ü—Ä–∏–º–µ—Ä:\n{next_task[1]}\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ."
            bot.send_message(message.chat.id, response)
            user_context[message.chat.id]['sub_id'] = next_sub_id
            bot.register_next_step_handler(message, check_answer)
        else:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–Ω–æ–ø–∫–∏
            user_score = user_scores.get(message.chat.id, 0)

            markup = InlineKeyboardMarkup()
            main_menu_button = InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_main_menu")
            next_topic_button = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ–º–∞–º", callback_data=f"show_topics")
            markup.add(main_menu_button, next_topic_button)

            bot.send_message(
                message.chat.id,
                f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–º—É! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {user_score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=markup
            )
            reset_user_score(message.chat.id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    except KeyError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.")
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ go_to_next_task: {e}")
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("next_topic:"))
def handle_next_topic(call):
    try:
        next_topic_id = int(call.data.split(":")[1])
        cursor.execute("SELECT id FROM topics WHERE id = %s;", (next_topic_id,))
        next_topic = cursor.fetchone()

        if next_topic:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É
            show_task(call.message, next_topic_id)
        else:
            bot.send_message(call.message.chat.id, "–°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_next_topic: {e}")
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
def show_leaderboard(message):
    try:
        cursor.execute("""
            SELECT u.full_name, l.correct_answers
            FROM leaderboard l
            JOIN users u ON l.user_id = u.id
            ORDER BY l.correct_answers DESC, u.full_name ASC
            LIMIT 10;
        """)
        leaderboard = cursor.fetchall()
        if leaderboard:
            response = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
            for index, (full_name, correct_answers) in enumerate(leaderboard, start=1):
                response += f"{index}. {full_name} ‚Äî {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        else:
            response = "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        bot.send_message(message.chat.id, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∏—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n\n"

        "1. /start - –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é. \n"
        "2. /topics - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.\n"
    )
    bot.send_message(message.chat.id, help_text)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /register
@bot.message_handler(commands=['register'])
def handle_register(message):
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        bot.register_next_step_handler(message, get_full_name)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

def get_full_name(message):
    full_name = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    bot.register_next_step_handler(message, get_age, full_name)

def get_age(message, full_name):
    try:
        age = int(message.text.strip())
        user_id = register_user(message.chat.id, message.from_user.username, full_name, age)
        if user_id:
            markup = InlineKeyboardMarkup()
            start_button = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_main_menu")
            markup.add(start_button)

            bot.send_message(
                message.chat.id,
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@bot.callback_query_handler(func=lambda call: call.data == "go_to_main_menu")
def handle_go_to_main_menu(call):
    send_welcome(call.message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

def reset_user_score(user_id):
    user_scores[user_id] = 0

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)
